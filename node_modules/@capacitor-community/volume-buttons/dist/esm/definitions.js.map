{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export type CallbackID = string;\n\nexport interface VolumeButtonsOptions {\n  /**\n   * This parameter can be used to disable the system volume handler (iOS only).\n   * If this is true, when up or down volume button is tapped, the system volume will always be reset to either\n   * the initial volume (the volume which was current when the volume buttons are started to be tracked/listened)\n   * or to 0.05 if the initial volume is less then 0.05 or to 0.95 if the initial volume\n   * is greater then 0.95.\n   *\n   * @since 1.0.0\n   */\n  disableSystemVolumeHandler?: boolean;\n  /**\n   * This parameter can be used to suppress/hide the system volume indicator (Android only, it is never shown on iOS already).\n   * If this is true, when up or down volume button is tapped, the system volume indicator will not be shown.\n   * The default value is false.\n   *\n   * @since 1.0.2\n   */\n  suppressVolumeIndicator?: boolean;\n}\n\nexport type VolumeButtonsCallback = (\n  result: VolumeButtonsResult,\n  err?: any,\n) => void;\n\nexport interface VolumeButtonsResult {\n  /**\n   * This indicates either the volume up or volume down button was pressed.\n   *\n   * @since 1.0.0\n   */\n  direction: 'up' | 'down';\n}\n\nexport interface GetIsWatchingResult {\n  /**\n   * If the volume buttons are being watched.\n   *\n   * @since 1.0.1\n   */\n  value: boolean;\n}\n\nexport interface VolumeButtonsPlugin {\n\n  /**\n   * Get the watch status of the volume buttons.\n   *\n   * @since 1.0.1\n   */\n  isWatching(): Promise<GetIsWatchingResult>;\n\n  /**\n   * Set up a watch for he hardware volume buttons changes\n   *\n   * @since 1.0.0\n   */\n  watchVolume(options: VolumeButtonsOptions, callback: VolumeButtonsCallback): Promise<CallbackID>;\n\n  /**\n   * Clear the existing watch\n   *\n   * @since 1.0.0\n   */\n  clearWatch(): Promise<void>;\n\n}\n"]}